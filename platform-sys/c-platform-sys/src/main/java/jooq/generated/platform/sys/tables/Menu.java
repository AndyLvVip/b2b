/*
 * This file is generated by jOOQ.
 */
package jooq.generated.platform.sys.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.platform.sys.DefaultSchema;
import jooq.generated.platform.sys.Indexes;
import jooq.generated.platform.sys.Keys;
import jooq.generated.platform.sys.tables.records.MenuRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Menu extends TableImpl<MenuRecord> {

    private static final long serialVersionUID = -1028139288;

    /**
     * The reference instance of <code>menu</code>
     */
    public static final Menu MENU = new Menu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MenuRecord> getRecordType() {
        return MenuRecord.class;
    }

    /**
     * The column <code>menu.id</code>.
     */
    public final TableField<MenuRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>menu.name</code>.
     */
    public final TableField<MenuRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menu.url</code>.
     */
    public final TableField<MenuRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menu.parent_id</code>.
     */
    public final TableField<MenuRecord, Long> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>menu.sequence</code>.
     */
    public final TableField<MenuRecord, BigDecimal> SEQUENCE = createField("sequence", org.jooq.impl.SQLDataType.DECIMAL(10, 6).nullable(false), this, "");

    /**
     * The column <code>menu.icon</code>.
     */
    public final TableField<MenuRecord, String> ICON = createField("icon", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>menu.created_on</code>.
     */
    public final TableField<MenuRecord, LocalDateTime> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>menu.created_by</code>.
     */
    public final TableField<MenuRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>menu.updated_on</code>.
     */
    public final TableField<MenuRecord, LocalDateTime> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>menu.updated_by</code>.
     */
    public final TableField<MenuRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>menu.version</code>.
     */
    public final TableField<MenuRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>menu</code> table reference
     */
    public Menu() {
        this(DSL.name("menu"), null);
    }

    /**
     * Create an aliased <code>menu</code> table reference
     */
    public Menu(String alias) {
        this(DSL.name(alias), MENU);
    }

    /**
     * Create an aliased <code>menu</code> table reference
     */
    public Menu(Name alias) {
        this(alias, MENU);
    }

    private Menu(Name alias, Table<MenuRecord> aliased) {
        this(alias, aliased, null);
    }

    private Menu(Name alias, Table<MenuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Menu(Table<O> child, ForeignKey<O, MenuRecord> key) {
        super(child, key, MENU);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MENU_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MenuRecord> getPrimaryKey() {
        return Keys.KEY_MENU_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MenuRecord>> getKeys() {
        return Arrays.<UniqueKey<MenuRecord>>asList(Keys.KEY_MENU_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<MenuRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Menu as(String alias) {
        return new Menu(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Menu as(Name alias) {
        return new Menu(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(String name) {
        return new Menu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(Name name) {
        return new Menu(name, null);
    }
}
