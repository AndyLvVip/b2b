/*
 * This file is generated by jOOQ.
 */
package jooq.generated.corporate.tables;


import jooq.generated.corporate.DefaultSchema;
import jooq.generated.corporate.Indexes;
import jooq.generated.corporate.Keys;
import jooq.generated.corporate.tables.records.CorporateRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Corporate extends TableImpl<CorporateRecord> {

    private static final long serialVersionUID = 2070191644;

    /**
     * The reference instance of <code>corporate</code>
     */
    public static final Corporate CORPORATE = new Corporate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CorporateRecord> getRecordType() {
        return CorporateRecord.class;
    }

    /**
     * The column <code>corporate.id</code>.
     */
    public final TableField<CorporateRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>corporate.name</code>.
     */
    public final TableField<CorporateRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>corporate.type</code>.
     */
    public final TableField<CorporateRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>corporate.logo_file_id</code>.
     */
    public final TableField<CorporateRecord, String> LOGO_FILE_ID = createField("logo_file_id", org.jooq.impl.SQLDataType.CHAR(36), this, "");

    /**
     * The column <code>corporate.fax_num</code>.
     */
    public final TableField<CorporateRecord, String> FAX_NUM = createField("fax_num", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>corporate.website</code>.
     */
    public final TableField<CorporateRecord, String> WEBSITE = createField("website", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>corporate.phone</code>.
     */
    public final TableField<CorporateRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>corporate.address_id</code>.
     */
    public final TableField<CorporateRecord, String> ADDRESS_ID = createField("address_id", org.jooq.impl.SQLDataType.CHAR(36), this, "");

    /**
     * The column <code>corporate.verified</code>.
     */
    public final TableField<CorporateRecord, Boolean> VERIFIED = createField("verified", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>corporate.active</code>.
     */
    public final TableField<CorporateRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>corporate.last_role_id</code>.
     */
    public final TableField<CorporateRecord, String> LAST_ROLE_ID = createField("last_role_id", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>corporate.created_on</code>.
     */
    public final TableField<CorporateRecord, LocalDateTime> CREATED_ON = createField("created_on", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>corporate.updated_on</code>.
     */
    public final TableField<CorporateRecord, LocalDateTime> UPDATED_ON = createField("updated_on", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>corporate.created_by</code>.
     */
    public final TableField<CorporateRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>corporate.updated_by</code>.
     */
    public final TableField<CorporateRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>corporate.version</code>.
     */
    public final TableField<CorporateRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>corporate</code> table reference
     */
    public Corporate() {
        this(DSL.name("corporate"), null);
    }

    /**
     * Create an aliased <code>corporate</code> table reference
     */
    public Corporate(String alias) {
        this(DSL.name(alias), CORPORATE);
    }

    /**
     * Create an aliased <code>corporate</code> table reference
     */
    public Corporate(Name alias) {
        this(alias, CORPORATE);
    }

    private Corporate(Name alias, Table<CorporateRecord> aliased) {
        this(alias, aliased, null);
    }

    private Corporate(Name alias, Table<CorporateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Corporate(Table<O> child, ForeignKey<O, CorporateRecord> key) {
        super(child, key, CORPORATE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CORPORATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CorporateRecord> getPrimaryKey() {
        return Keys.KEY_CORPORATE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CorporateRecord>> getKeys() {
        return Arrays.<UniqueKey<CorporateRecord>>asList(Keys.KEY_CORPORATE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<CorporateRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Corporate as(String alias) {
        return new Corporate(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Corporate as(Name alias) {
        return new Corporate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Corporate rename(String name) {
        return new Corporate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Corporate rename(Name name) {
        return new Corporate(name, null);
    }
}
